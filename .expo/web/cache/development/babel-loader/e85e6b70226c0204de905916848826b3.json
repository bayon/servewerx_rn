{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport var REGISTER_USER_FAIL = \"REGISTER_USER_FAIL\";\nexport var LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport var LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\nexport var LOGOUT_USER_SUCCESS = \"LOGOUT_USER_SUCCESS\";\nexport var LOGOUT_USER_FAIL = \"LOGOUT_USER_FAIL\";\nvar BASE_URL = \"https://nameless-refuge-42185.herokuapp.com\";\nexport var registerUser = function registerUser(authData) {\n  var fullName = authData.fullName,\n      email = authData.email,\n      password = authData.password;\n  return function _callee(dispatch) {\n    var result, resultData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(BASE_URL + \"/users/register\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                fullName: fullName,\n                email: email,\n                password: password\n              })\n            }));\n\n          case 2:\n            result = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(result.json());\n\n          case 5:\n            resultData = _context.sent;\n\n            if (resultData.success) {\n              dispatch({\n                type: REGISTER_USER_SUCCESS,\n                payload: resultData\n              });\n            } else {\n              dispatch({\n                type: REGISTER_USER_FAIL\n              });\n            }\n\n            return _context.abrupt(\"return\", resultData);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: LOGOUT_USER_SUCCESS\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loginUser = function loginUser(authData) {\n  var email = authData.email,\n      password = authData.password;\n  return function _callee3(dispatch) {\n    var result, resultData;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(BASE_URL + \"/users/login\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password\n              })\n            }));\n\n          case 2:\n            result = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(result.json());\n\n          case 5:\n            resultData = _context3.sent;\n\n            if (resultData.success) {\n              dispatch({\n                type: LOGIN_USER_SUCCESS,\n                payload: resultData\n              });\n            } else {\n              dispatch({\n                type: LOGIN_USER_FAIL\n              });\n            }\n\n            return _context3.abrupt(\"return\", resultData);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/fredrickforte/Documents/developer/github/servewerx/servewerx_rn/redux/actions/authAction.js"],"names":["REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAIL","BASE_URL","registerUser","authData","fullName","email","password","dispatch","fetch","method","headers","body","JSON","stringify","result","json","resultData","success","type","payload","logoutUser","loginUser"],"mappings":"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","sourcesContent":["export const REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAIL = \"REGISTER_USER_FAIL\";\n\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\n\nexport const LOGOUT_USER_SUCCESS = \"LOGOUT_USER_SUCCESS\";\nexport const LOGOUT_USER_FAIL = \"LOGOUT_USER_FAIL\";\n\n\n\n//const BASE_URL = \"http://localhost:3000/api\";\nconst BASE_URL = \"https://nameless-refuge-42185.herokuapp.com\";\n\nexport const registerUser = (authData) => {\n  const { fullName, email, password } = authData;\n  return async (dispatch) => {\n    //benefit: can now make async http request to Register\n    const result = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        fullName,\n        email,\n        password,\n      }),\n    });\n\n    const resultData = await result.json();\n    if (resultData.success){\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: resultData,\n          });\n    } else {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n          });\n    }\n   \n    return resultData;\n\n  };\n};\nexport const logoutUser = () => {\n  //console.log(\"how the hell is that?\")\n  //console.log('dispatch:',dispatch)\n  // dispatch({\n  //   type: LOGOUT_USER_SUCCESS,\n  // });\n  return async (dispatch) => {\n    dispatch({\n        type: LOGOUT_USER_SUCCESS,\n        })\n  }\n}\n\nexport const loginUser = (authData) => {\n  const { email, password } = authData;\n  return async (dispatch) => {\n    //benefit: can now make async http request to Login\n    const result = await fetch(`${BASE_URL}/users/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email,\n          password,\n        }),\n      });\n  \n      const resultData = await result.json();\n      if(resultData.success){\n        dispatch({\n            type: LOGIN_USER_SUCCESS,\n            payload: resultData,\n          });\n      } else {\n        dispatch({\n            type: LOGIN_USER_FAIL,\n          });\n      }\n      return resultData; //Why?:  so that we have access to it in the dispatch to the action from loginScreen.\n    //\n    \n  };\n};\n"]},"metadata":{},"sourceType":"module"}