{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";export var REGISTER_USER_SUCCESS=\"REGISTER_USER_SUCCESS\";export var REGISTER_USER_FAIL=\"REGISTER_USER_FAIL\";export var LOGIN_USER_SUCCESS=\"LOGIN_USER_SUCCESS\";export var LOGIN_USER_FAIL=\"LOGIN_USER_FAIL\";export var LOGOUT_USER_SUCCESS=\"LOGOUT_USER_SUCCESS\";export var LOGOUT_USER_FAIL=\"LOGOUT_USER_FAIL\";var BASE_URL=\"https://nameless-refuge-42185.herokuapp.com\";export var registerUser=function registerUser(authData){var fullName=authData.fullName,email=authData.email,password=authData.password;return function _callee(dispatch){var result,resultData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(fetch(BASE_URL+\"/users/register\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({fullName:fullName,email:email,password:password})}));case 2:result=_context.sent;_context.next=5;return _regeneratorRuntime.awrap(result.json());case 5:resultData=_context.sent;if(resultData.success){dispatch({type:REGISTER_USER_SUCCESS,payload:resultData});}else{dispatch({type:REGISTER_USER_FAIL});}return _context.abrupt(\"return\",resultData);case 8:case\"end\":return _context.stop();}}},null,null,null,Promise);};};export var logoutUser=function logoutUser(){return function _callee2(dispatch){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:LOGOUT_USER_SUCCESS});case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);};};export var loginUser=function loginUser(authData){var email=authData.email,password=authData.password;return function _callee3(dispatch){var result,resultData;return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(fetch(BASE_URL+\"/users/login\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}));case 2:result=_context3.sent;_context3.next=5;return _regeneratorRuntime.awrap(result.json());case 5:resultData=_context3.sent;if(resultData.success){dispatch({type:LOGIN_USER_SUCCESS,payload:resultData});}else{dispatch({type:LOGIN_USER_FAIL});}return _context3.abrupt(\"return\",resultData);case 8:case\"end\":return _context3.stop();}}},null,null,null,Promise);};};","map":{"version":3,"sources":["/Users/fredrickforte/Documents/developer/github/servewerx/deep/servewerx_rn/redux/actions/authAction.js"],"names":["REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAIL","BASE_URL","registerUser","authData","fullName","email","password","dispatch","fetch","method","headers","body","JSON","stringify","result","json","resultData","success","type","payload","logoutUser","loginUser"],"mappings":"4DAAA,MAAO,IAAMA,CAAAA,qBAAqB,CAAG,uBAA9B,CACP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,oBAA3B,CAEP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,oBAA3B,CACP,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CAEP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CAKP,GAAMC,CAAAA,QAAQ,CAAG,6CAAjB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAc,IAChCC,CAAAA,QADgC,CACFD,QADE,CAChCC,QADgC,CACtBC,KADsB,CACFF,QADE,CACtBE,KADsB,CACfC,QADe,CACFH,QADE,CACfG,QADe,CAExC,MAAO,kBAAOC,QAAP,0LAEgBC,KAAK,CAAIP,QAAJ,mBAA+B,CACvDQ,MAAM,CAAE,MAD+C,CAEvDC,OAAO,CAAE,CACP,eAAgB,kBADT,CAF8C,CAKvDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBT,QAAQ,CAARA,QADmB,CAEnBC,KAAK,CAALA,KAFmB,CAGnBC,QAAQ,CAARA,QAHmB,CAAf,CALiD,CAA/B,CAFrB,SAECQ,MAFD,gEAcoBA,MAAM,CAACC,IAAP,EAdpB,SAcCC,UAdD,eAeL,GAAIA,UAAU,CAACC,OAAf,CAAuB,CACnBV,QAAQ,CAAC,CACLW,IAAI,CAAEvB,qBADD,CAELwB,OAAO,CAAEH,UAFJ,CAAD,CAAR,CAIH,CALD,IAKO,CACHT,QAAQ,CAAC,CACLW,IAAI,CAAEtB,kBADD,CAAD,CAAR,CAGH,CAxBI,gCA0BEoB,UA1BF,uEAAP,CA6BD,CA/BM,CAgCP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAM9B,MAAO,mBAAOb,QAAP,uHACLA,QAAQ,CAAC,CACLW,IAAI,CAAEnB,mBADD,CAAD,CAAR,CADK,sEAAP,CAKD,CAXM,CAaP,MAAO,IAAMsB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAClB,QAAD,CAAc,IAC7BE,CAAAA,KAD6B,CACTF,QADS,CAC7BE,KAD6B,CACtBC,QADsB,CACTH,QADS,CACtBG,QADsB,CAErC,MAAO,mBAAOC,QAAP,+LAEgBC,KAAK,CAAIP,QAAJ,gBAA4B,CAClDQ,MAAM,CAAE,MAD0C,CAElDC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFyC,CAKlDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBR,KAAK,CAALA,KADmB,CAEnBC,QAAQ,CAARA,QAFmB,CAAf,CAL4C,CAA5B,CAFrB,SAECQ,MAFD,kEAasBA,MAAM,CAACC,IAAP,EAbtB,SAaGC,UAbH,gBAcH,GAAGA,UAAU,CAACC,OAAd,CAAsB,CACpBV,QAAQ,CAAC,CACLW,IAAI,CAAErB,kBADD,CAELsB,OAAO,CAAEH,UAFJ,CAAD,CAAR,CAID,CALD,IAKO,CACLT,QAAQ,CAAC,CACLW,IAAI,CAAEpB,eADD,CAAD,CAAR,CAGD,CAvBE,iCAwBIkB,UAxBJ,wEAAP,CA4BD,CA9BM","sourcesContent":["export const REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAIL = \"REGISTER_USER_FAIL\";\n\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\n\nexport const LOGOUT_USER_SUCCESS = \"LOGOUT_USER_SUCCESS\";\nexport const LOGOUT_USER_FAIL = \"LOGOUT_USER_FAIL\";\n\n\n\n//const BASE_URL = \"http://localhost:3000/api\";\nconst BASE_URL = \"https://nameless-refuge-42185.herokuapp.com\";\n\nexport const registerUser = (authData) => {\n  const { fullName, email, password } = authData;\n  return async (dispatch) => {\n    //benefit: can now make async http request to Register\n    const result = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        fullName,\n        email,\n        password,\n      }),\n    });\n\n    const resultData = await result.json();\n    if (resultData.success){\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: resultData,\n          });\n    } else {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n          });\n    }\n   \n    return resultData;\n\n  };\n};\nexport const logoutUser = () => {\n  //console.log(\"how the hell is that?\")\n  //console.log('dispatch:',dispatch)\n  // dispatch({\n  //   type: LOGOUT_USER_SUCCESS,\n  // });\n  return async (dispatch) => {\n    dispatch({\n        type: LOGOUT_USER_SUCCESS,\n        })\n  }\n}\n\nexport const loginUser = (authData) => {\n  const { email, password } = authData;\n  return async (dispatch) => {\n    //benefit: can now make async http request to Login\n    const result = await fetch(`${BASE_URL}/users/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email,\n          password,\n        }),\n      });\n  \n      const resultData = await result.json();\n      if(resultData.success){\n        dispatch({\n            type: LOGIN_USER_SUCCESS,\n            payload: resultData,\n          });\n      } else {\n        dispatch({\n            type: LOGIN_USER_FAIL,\n          });\n      }\n      return resultData; //Why?:  so that we have access to it in the dispatch to the action from loginScreen.\n    //\n    \n  };\n};\n"]},"metadata":{},"sourceType":"module"}